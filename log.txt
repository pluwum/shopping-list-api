============================= test session starts =============================
platform win32 -- Python 3.6.1, pytest-3.2.1, py-1.4.34, pluggy-0.4.0
rootdir: C:\Users\Pato\Downloads\Bootcamp 03\challenge3, inifile:
collected 5 items

tests\test_shoppinglist.py FFFFF

================================== FAILURES ===================================
_____________ BucketlistTestCase.test_api_can_get_all_bucketlists _____________

self = <tests.test_shoppinglist.BucketlistTestCase testMethod=test_api_can_get_all_bucketlists>

    def test_api_can_get_all_bucketlists(self):
        """Test API can get a bucketlist (GET request)."""
        self.register_user()
        result = self.login_user()
        access_token = json.loads(result.data.decode())['access_token']
    
        # create a bucketlist by making a POST request
        res = self.client().post(
            '/shoppinglist/',
            headers=dict(Authorization="Bearer " + access_token),
>           data=self.bucketlist)

tests\test_shoppinglist.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\..\envs\shopping-list-api\lib\site-packages\werkzeug\test.py:801: in post
    return self.open(*args, **kw)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\testing.py:127: in open
    follow_redirects=follow_redirects)
..\..\..\envs\shopping-list-api\lib\site-packages\werkzeug\test.py:764: in open
    response = self.run_wsgi_app(environ, buffered=buffered)
..\..\..\envs\shopping-list-api\lib\site-packages\werkzeug\test.py:677: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
..\..\..\envs\shopping-list-api\lib\site-packages\werkzeug\test.py:884: in run_wsgi_app
    app_rv = app(environ, start_response)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1997: in __call__
    return self.wsgi_app(environ, start_response)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1985: in wsgi_app
    response = self.handle_exception(e)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1540: in handle_exception
    reraise(exc_type, exc_value, tb)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\_compat.py:33: in reraise
    raise value
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1982: in wsgi_app
    response = self.full_dispatch_request()
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1614: in full_dispatch_request
    rv = self.handle_user_exception(e)
..\..\..\envs\shopping-list-api\lib\site-packages\flask_api\app.py:103: in handle_user_exception
    reraise(exc_type, exc_value, tb)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\_compat.py:33: in reraise
    raise value
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1612: in full_dispatch_request
    rv = self.dispatch_request()
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1598: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    @app.route('/shoppinglist/', methods=['POST', 'GET'])
    def shoppinglists():
        #shoppinglist = ShoppingList.query.filter_by(id=1).first()
        # return shoppinglist.save(shoppinglist, 'dhdjdh')
        if request.method == "POST":
            name = str(request.data.get('name', ''))
            if name:
>               shoppinglist = ShoppingList(name=name)
E               TypeError: __init__() missing 1 required positional argument: 'user_id'

app\__init__.py:27: TypeError
____________ BucketlistTestCase.test_api_can_get_bucketlist_by_id _____________

self = <tests.test_shoppinglist.BucketlistTestCase testMethod=test_api_can_get_bucketlist_by_id>

    def test_api_can_get_bucketlist_by_id(self):
        """Test API can get a single bucketlist by using it's id."""
        self.register_user()
        result = self.login_user()
        access_token = json.loads(result.data.decode())['access_token']
    
        rv = self.client().post(
            '/shoppinglist/',
            headers=dict(Authorization="Bearer " + access_token),
>           data=self.bucketlist)

tests\test_shoppinglist.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\..\envs\shopping-list-api\lib\site-packages\werkzeug\test.py:801: in post
    return self.open(*args, **kw)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\testing.py:127: in open
    follow_redirects=follow_redirects)
..\..\..\envs\shopping-list-api\lib\site-packages\werkzeug\test.py:764: in open
    response = self.run_wsgi_app(environ, buffered=buffered)
..\..\..\envs\shopping-list-api\lib\site-packages\werkzeug\test.py:677: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
..\..\..\envs\shopping-list-api\lib\site-packages\werkzeug\test.py:884: in run_wsgi_app
    app_rv = app(environ, start_response)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1997: in __call__
    return self.wsgi_app(environ, start_response)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1985: in wsgi_app
    response = self.handle_exception(e)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1540: in handle_exception
    reraise(exc_type, exc_value, tb)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\_compat.py:33: in reraise
    raise value
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1982: in wsgi_app
    response = self.full_dispatch_request()
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1614: in full_dispatch_request
    rv = self.handle_user_exception(e)
..\..\..\envs\shopping-list-api\lib\site-packages\flask_api\app.py:103: in handle_user_exception
    reraise(exc_type, exc_value, tb)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\_compat.py:33: in reraise
    raise value
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1612: in full_dispatch_request
    rv = self.dispatch_request()
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1598: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    @app.route('/shoppinglist/', methods=['POST', 'GET'])
    def shoppinglists():
        #shoppinglist = ShoppingList.query.filter_by(id=1).first()
        # return shoppinglist.save(shoppinglist, 'dhdjdh')
        if request.method == "POST":
            name = str(request.data.get('name', ''))
            if name:
>               shoppinglist = ShoppingList(name=name)
E               TypeError: __init__() missing 1 required positional argument: 'user_id'

app\__init__.py:27: TypeError
______________ BucketlistTestCase.test_bucketlist_can_be_edited _______________

self = <tests.test_shoppinglist.BucketlistTestCase testMethod=test_bucketlist_can_be_edited>

    def test_bucketlist_can_be_edited(self):
        """Test API can edit an existing bucketlist. (PUT request)"""
        self.register_user()
        result = self.login_user()
        access_token = json.loads(result.data.decode())['access_token']
    
        # first, we create a bucketlist by making a POST request
        rv = self.client().post(
            '/shoppinglist/',
            headers=dict(Authorization="Bearer " + access_token),
>           data={'name': 'Eat, pray and love'})

tests\test_shoppinglist.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\..\envs\shopping-list-api\lib\site-packages\werkzeug\test.py:801: in post
    return self.open(*args, **kw)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\testing.py:127: in open
    follow_redirects=follow_redirects)
..\..\..\envs\shopping-list-api\lib\site-packages\werkzeug\test.py:764: in open
    response = self.run_wsgi_app(environ, buffered=buffered)
..\..\..\envs\shopping-list-api\lib\site-packages\werkzeug\test.py:677: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
..\..\..\envs\shopping-list-api\lib\site-packages\werkzeug\test.py:884: in run_wsgi_app
    app_rv = app(environ, start_response)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1997: in __call__
    return self.wsgi_app(environ, start_response)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1985: in wsgi_app
    response = self.handle_exception(e)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1540: in handle_exception
    reraise(exc_type, exc_value, tb)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\_compat.py:33: in reraise
    raise value
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1982: in wsgi_app
    response = self.full_dispatch_request()
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1614: in full_dispatch_request
    rv = self.handle_user_exception(e)
..\..\..\envs\shopping-list-api\lib\site-packages\flask_api\app.py:103: in handle_user_exception
    reraise(exc_type, exc_value, tb)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\_compat.py:33: in reraise
    raise value
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1612: in full_dispatch_request
    rv = self.dispatch_request()
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1598: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    @app.route('/shoppinglist/', methods=['POST', 'GET'])
    def shoppinglists():
        #shoppinglist = ShoppingList.query.filter_by(id=1).first()
        # return shoppinglist.save(shoppinglist, 'dhdjdh')
        if request.method == "POST":
            name = str(request.data.get('name', ''))
            if name:
>               shoppinglist = ShoppingList(name=name)
E               TypeError: __init__() missing 1 required positional argument: 'user_id'

app\__init__.py:27: TypeError
_________________ BucketlistTestCase.test_bucketlist_creation _________________

self = <tests.test_shoppinglist.BucketlistTestCase testMethod=test_bucketlist_creation>

    def test_bucketlist_creation(self):
        """Test API can create a bucketlist (POST request)"""
        self.register_user()
        result = self.login_user()
        access_token = json.loads(result.data.decode())['access_token']
    
        # create a bucketlist by making a POST request
        res = self.client().post(
            '/shoppinglist/',
            headers=dict(Authorization="Bearer " + access_token),
>           data=self.bucketlist)

tests\test_shoppinglist.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\..\envs\shopping-list-api\lib\site-packages\werkzeug\test.py:801: in post
    return self.open(*args, **kw)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\testing.py:127: in open
    follow_redirects=follow_redirects)
..\..\..\envs\shopping-list-api\lib\site-packages\werkzeug\test.py:764: in open
    response = self.run_wsgi_app(environ, buffered=buffered)
..\..\..\envs\shopping-list-api\lib\site-packages\werkzeug\test.py:677: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
..\..\..\envs\shopping-list-api\lib\site-packages\werkzeug\test.py:884: in run_wsgi_app
    app_rv = app(environ, start_response)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1997: in __call__
    return self.wsgi_app(environ, start_response)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1985: in wsgi_app
    response = self.handle_exception(e)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1540: in handle_exception
    reraise(exc_type, exc_value, tb)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\_compat.py:33: in reraise
    raise value
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1982: in wsgi_app
    response = self.full_dispatch_request()
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1614: in full_dispatch_request
    rv = self.handle_user_exception(e)
..\..\..\envs\shopping-list-api\lib\site-packages\flask_api\app.py:103: in handle_user_exception
    reraise(exc_type, exc_value, tb)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\_compat.py:33: in reraise
    raise value
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1612: in full_dispatch_request
    rv = self.dispatch_request()
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1598: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    @app.route('/shoppinglist/', methods=['POST', 'GET'])
    def shoppinglists():
        #shoppinglist = ShoppingList.query.filter_by(id=1).first()
        # return shoppinglist.save(shoppinglist, 'dhdjdh')
        if request.method == "POST":
            name = str(request.data.get('name', ''))
            if name:
>               shoppinglist = ShoppingList(name=name)
E               TypeError: __init__() missing 1 required positional argument: 'user_id'

app\__init__.py:27: TypeError
_________________ BucketlistTestCase.test_bucketlist_deletion _________________

self = <tests.test_shoppinglist.BucketlistTestCase testMethod=test_bucketlist_deletion>

    def test_bucketlist_deletion(self):
        """Test API can delete an existing bucketlist. (DELETE request)."""
        self.register_user()
        result = self.login_user()
        access_token = json.loads(result.data.decode())['access_token']
    
        rv = self.client().post(
            '/shoppinglist/',
            headers=dict(Authorization="Bearer " + access_token),
>           data={'name': 'Eat, pray and love'})

tests\test_shoppinglist.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\..\envs\shopping-list-api\lib\site-packages\werkzeug\test.py:801: in post
    return self.open(*args, **kw)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\testing.py:127: in open
    follow_redirects=follow_redirects)
..\..\..\envs\shopping-list-api\lib\site-packages\werkzeug\test.py:764: in open
    response = self.run_wsgi_app(environ, buffered=buffered)
..\..\..\envs\shopping-list-api\lib\site-packages\werkzeug\test.py:677: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
..\..\..\envs\shopping-list-api\lib\site-packages\werkzeug\test.py:884: in run_wsgi_app
    app_rv = app(environ, start_response)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1997: in __call__
    return self.wsgi_app(environ, start_response)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1985: in wsgi_app
    response = self.handle_exception(e)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1540: in handle_exception
    reraise(exc_type, exc_value, tb)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\_compat.py:33: in reraise
    raise value
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1982: in wsgi_app
    response = self.full_dispatch_request()
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1614: in full_dispatch_request
    rv = self.handle_user_exception(e)
..\..\..\envs\shopping-list-api\lib\site-packages\flask_api\app.py:103: in handle_user_exception
    reraise(exc_type, exc_value, tb)
..\..\..\envs\shopping-list-api\lib\site-packages\flask\_compat.py:33: in reraise
    raise value
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1612: in full_dispatch_request
    rv = self.dispatch_request()
..\..\..\envs\shopping-list-api\lib\site-packages\flask\app.py:1598: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    @app.route('/shoppinglist/', methods=['POST', 'GET'])
    def shoppinglists():
        #shoppinglist = ShoppingList.query.filter_by(id=1).first()
        # return shoppinglist.save(shoppinglist, 'dhdjdh')
        if request.method == "POST":
            name = str(request.data.get('name', ''))
            if name:
>               shoppinglist = ShoppingList(name=name)
E               TypeError: __init__() missing 1 required positional argument: 'user_id'

app\__init__.py:27: TypeError
========================== 5 failed in 18.29 seconds ==========================
